package com.pb.nex26dv.shippingapp;

import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.os.AsyncTask;
import android.os.Environment;
import android.os.StrictMode;
import android.provider.MediaStore;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Base64;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.net.ssl.HttpsURLConnection;

import static com.pb.nex26dv.shippingapp.R.id.add_cart;
import static com.pb.nex26dv.shippingapp.R.id.addtocart;
import static com.pb.nex26dv.shippingapp.R.id.backbutton;
import static com.pb.nex26dv.shippingapp.R.id.cancel_order;
import static com.pb.nex26dv.shippingapp.R.id.Login_button;
import static com.pb.nex26dv.shippingapp.R.id.order_cancel;
import static com.pb.nex26dv.shippingapp.R.id.order_submit;

public class orderplacing extends AppCompatActivity {
    private static Button submit_button;
    private static Button addtocart;
    private static Button cancel_order;
    private static Button back_button;
    private Button btnSelect;
    private String userChoosenTask;
    private int REQUEST_CAMERA = 0, SELECT_FILE = 1;

    String firstResponse = null;
    String secondResponse = null;

    float l, b, h, tmp;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_orderplacing);
        if (android.os.Build.VERSION.SDK_INT > 9) {
            StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
            StrictMode.setThreadPolicy(policy);
        }
        OnClickButtonListener_submit();
        OnClickButtonListener_addtocart();
        OnClickButtonListener_cancel_order();
        OnClickButtonListener_back_button();
        btnSelect = (Button) findViewById(R.id.order_camer_button);
        btnSelect.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                selectImage();
            }
        });


    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        switch (requestCode) {
            case Utility.MY_PERMISSIONS_REQUEST_READ_EXTERNAL_STORAGE:
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    if (userChoosenTask.equals("Take Photo For Dimension"))
                        cameraIntent();
                    else if (userChoosenTask.equals("Choose from Library"))
                        galleryIntent();
                } else {
                    //code for deny
                }
                break;
        }
    }

    private void selectImage() {
        final CharSequence[] items = {"Take Photo", "Choose from Library",
                "Cancel"};

        AlertDialog.Builder builder = new AlertDialog.Builder(orderplacing.this);
        builder.setTitle("Add Photo!");
        builder.setItems(items, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int item) {
                //boolean result=Utility.checkPermission(orderplacing.this);
                boolean result = true;

                if (items[item].equals("Take Photo")) {
                    userChoosenTask = "Take Photo";
                    if (result)
                        cameraIntent();

                } else if (items[item].equals("Choose from Library")) {
                    userChoosenTask = "Choose from Library";
                    if (result)
                        galleryIntent();

                } else if (items[item].equals("Cancel")) {
                    dialog.dismiss();
                }
            }
        });
        builder.show();
    }

    private void galleryIntent() {
        Intent intent = new Intent();
        intent.setType("image/*");
        intent.setAction(Intent.ACTION_GET_CONTENT);//
        startActivityForResult(Intent.createChooser(intent, "Select File"), SELECT_FILE);
    }

    private void cameraIntent() {
        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        startActivityForResult(intent, REQUEST_CAMERA);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (resultCode == Activity.RESULT_OK) {
            if (requestCode == SELECT_FILE)
                onSelectFromGalleryResult(data);
            else if (requestCode == REQUEST_CAMERA)
                onCaptureImageResult(data);
        }
    }

    private void onCaptureImageResult(Intent data) {
        Bitmap thumbnail = (Bitmap) data.getExtras().get("data");
        Bitmap scaled = Bitmap.createScaledBitmap(thumbnail, 600, 450, false);

        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        scaled.compress(Bitmap.CompressFormat.JPEG, 100, bytes);
        String encoded = Base64.encodeToString(bytes.toByteArray(), Base64.DEFAULT);
        String response = makeDimPostCall(encoded);

        if (firstResponse == null) {
            firstResponse = response;
            cameraIntent();
            Toast.makeText(getApplicationContext(), "Please snap second picture for full dimention", Toast.LENGTH_LONG).show();

        } else {
            secondResponse = response;

        }

        List<Float> finDim = getFinalDimList();
        if (finDim != null && finDim.size() >= 3) {
            EditText editTexHeight = (EditText)findViewById(R.id.editTexHeight);
            EditText editTexWid = (EditText)findViewById(R.id.editTexWid);
            EditText editTexLen = (EditText)findViewById(R.id.editTexLen);
            editTexLen.setText(finDim.get(0).toString(), TextView.BufferType.EDITABLE);
            editTexWid.setText(finDim.get(1).toString(), TextView.BufferType.EDITABLE);
            editTexHeight.setText(finDim.get(2).toString(), TextView.BufferType.EDITABLE);
            //todo Sumit: set values in UI
        }


    }

    public void OnClickButtonListener_submit() {

        submit_button = (Button) findViewById(order_submit);
        submit_button.setOnClickListener(
                new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Intent intent = new Intent("com.pb.nex26dv.shippingapp.conformationpage");
                        startActivity(intent);
                    }
                }
        );
    }


    public void OnClickButtonListener_addtocart() {

        addtocart = (Button) findViewById(add_cart);
        addtocart.setOnClickListener(
                new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Intent intent = new Intent("com.pb.nex26dv.shippingapp.wishlist");
                        startActivity(intent);
                    }
                }
        );
    }


    public void OnClickButtonListener_cancel_order() {

        cancel_order = (Button) findViewById(order_cancel);
        cancel_order.setOnClickListener(
                new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Intent intent = new Intent("com.pb.nex26dv.shippingapp.loginActivity");
                        startActivity(intent);
                    }
                }
        );
    }


    public void OnClickButtonListener_back_button() {

        back_button = (Button) findViewById(backbutton);
        back_button.setOnClickListener(
                new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Intent intent = new Intent("com.pb.nex26dv.shippingapp.loginActivity");
                        startActivity(intent);
                    }
                }
        );
    }


    @SuppressWarnings("deprecation")
    private void onSelectFromGalleryResult(Intent data) {

        Bitmap bm = null;
        if (data != null) {
            try {
                bm = MediaStore.Images.Media.getBitmap(getApplicationContext().getContentResolver(), data.getData());

            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        //ivImage.setImageBitmap(bm);
    }

    private String makeDimPostCall(String requestData) {
        HttpURLConnection httpcon;
        String url = "http://192.168.43.102:5000/getDim";
        String data = null;
        String result = null;
        try {
            //Connect
            httpcon = (HttpURLConnection) ((new URL (url).openConnection()));
            httpcon.setDoOutput(true);
            httpcon.setRequestProperty("Content-Type", "application/json");
            //httpcon.setRequestProperty("Accept", "application/json");
            httpcon.setRequestMethod("POST");
            httpcon.connect();

            //Write
            OutputStream os = httpcon.getOutputStream();
            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));
            writer.write(requestData);
            writer.close();
            os.close();

            //Read
            BufferedReader br = new BufferedReader(new InputStreamReader(httpcon.getInputStream(),"UTF-8"));

            String line = null;
            StringBuilder sb = new StringBuilder();

            while ((line = br.readLine()) != null) {
                sb.append(line);
            }

            br.close();
            result = sb.toString();

        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return result;
    }



    public List<Float> getFinalDimList() {
        List<Float> dim = new ArrayList<>();
        if (secondResponse != null) {

            l = Float.parseFloat(firstResponse.substring(0, firstResponse.indexOf(',')));
            b = Float.parseFloat(firstResponse.substring(firstResponse.indexOf(',') + 1, firstResponse.length() - 1));

            h = Float.parseFloat(secondResponse.substring(0, secondResponse.indexOf(',')));
            tmp = Float.parseFloat(secondResponse.substring(secondResponse.indexOf(',') + 1, secondResponse.length() - 1));

            dim.add(l);
            dim.add(b);
            dim.add(h);
            dim.add(tmp);
            Float min = Float.MAX_VALUE;
            for (int i = 0; i < dim.size(); i++) {
                for (int j = i + 1; j < dim.size(); j++) {
                    if (Math.abs(dim.get(i) - dim.get(j)) < min)
                        min = Math.abs(dim.get(i) - dim.get(j));
                }
            }

            for (int i = 0; i < dim.size(); i++) {
                for (int j = i + 1; j < dim.size(); j++) {
                    if (min.equals(Math.abs(dim.get(i) - dim.get(j))))
                        dim.remove(j);
                }
            }

            firstResponse = secondResponse = null;
        }
        return dim;
    }

}
